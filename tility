#!/usr/bin/env node

// Define vars to use throughout
var program, tilityDir, setupApp, buildApp, envList, env, appName, projDir, defaultCmds,
    envCmds, build, css, cssLib, js, buildPackageJson;

// Module dependencies.
require('shelljs/global');
require('colors');
program = require('commander');

program
  .version('0.0.4')
  .option('-n, --new', 'Create a new application')
  .option('-u, --update', 'Update Tility to latest version')
  .usage('[options] <app-name>')
  .parse(process.argv);

tilityDir = '/usr/local/tility';

if(program.new) {
  // *********** INITIALIZE APP *********** //
  envList   = ['scratch', 'rails', 'node'];
  cssList   = ['Sass', 'LESS', 'Stylus', 'None'];
  sassList  = ['Bourbon', 'Bourbon w/ Neat', 'Compass', 'Compass w/ Susy', 'None'];
  lessList  = ['LESS Hat', 'Less Elements', 'None'];
  stylList  = ['nib', 'roots', 'None'];
  jsList    = ['CoffeeScript', 'JavaScript'];

  appName = program.args[0];

  // verify directory doesn't exist
  if (test('-d', appName)) {
    // directory exist, error out
    echo(('ERROR: path already exists, please choose a new application name.').red);
    process.stdin.destroy();
  } else {
    // directory doesn't exist, let's create it and move on!
    mkdir(appName);
    // switch to app dir
    cd(appName);
    // set as project root
    projDir = pwd();

    // let's find out which environment we're going to build
    echo('Choose your environment:');
    program.choose(envList, function(i){

      env = envList[i];
      echo('Loading...');
      setupApp();
      if(env == 'scratch') {
        echo('Choose your favorite CSS Preprocessor:');
        program.choose(cssList, function(i){
          css = cssList[i];
          // if(css == 'Sass') {
          //   echo('Choose your favorite Preprocessor Library:');
          //   program.choose(sassList, function(i){
          //     cssLib = sassList[i];
          //   });
          // } else if(css == 'LESS') {
          //   echo('Choose your favorite Preprocessor Library:');
          //   program.choose(lessList, function(i){
          //     cssLib = lessList[i];
          //   });
          // } else if(css == 'Stylus') {
          //   echo('Choose your favorite Preprocessor Library:');
          //   program.choose(stylList, function(i){
          //     cssLib = stylList[i];
          //   });
          // } else {
          //   cssLib = 'None';
          // }

          js = 'None';

          buildPackageJson(css, js);
          process.stdin.destroy();
        });
      } else {
        buildApp();
        process.stdin.destroy();
      }

    });

  }
} else if (program.update) {
  // *********** UPDATE TILITY *********** //
  cd(tilityDir);
  exec('./update');
} else {
  echo(('ERROR: unknown command.').red);
  process.stdin.destroy();
}

setupApp = function(){
  // loads up default commands
  defaultCmds = require(tilityDir + '/lib/tility.default.js');

  // run standard setup routine
  defaultCmds.setup(tilityDir, projDir, env);
}

buildApp = function(){
  // load up environment build commands
  envCmds = require(tilityDir + '/lib/' + env + '/tility.js');

  // launch build process
  envCmds.build(tilityDir, projDir, appName);

  // run wrapup commands
  defaultCmds.wrapup(projDir);

  // output runtime directions
  envCmds.output();
}

buildPackageJson = function(css, js) {
  var replacement = "  \"devDependencies\": {\n\t\"grunt-contrib-" + css.toLowerCase() + "\": \"git://github.com/gruntjs/grunt-contrib-" + css.toLowerCase() + ".git#master\"";
  sed('-i', projDir + '/package.json', '  "devDependencies": {', replacement);
}